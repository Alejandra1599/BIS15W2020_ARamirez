) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x , y = input$y, fill = "Ethnicity" )) + geom_bar()
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
selectInput("y", "Select Y Variable", choices = c("FilteredCountFR", "`Perc FR`"),
selected = "`Perc FR`"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x , y = input$y, fill = "Ethnicity" )) + geom_bar(stat= "identity")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x , y = "FilteredCountFR" , fill = "Ethnicity" )) + geom_bar(stat= "identity", position = "dodge")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x , y = "FilteredCountFR" , fill = "Ethnicity" )) + geom_bar(stat= "identity", position = "dodge")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions App Alternative"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Ethnicity", "Campus", "Category"),
selected = "Ethnicity"),
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
), # close the first box
box(title = "Plot of Iris Data", width = 7,
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
), # close the first box
box(title = "Plot of Iris Data", width = 7,
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
), # close the first box
box(title = "Plot of Iris Data", width = 7,
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
)
server <- function(input, output, session) {
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "500px", height = "400px"))
), # close the first box
box(title = "Plot of Iris Data", width = 7,
) # close the second box
) # close the row
) # close the dashboard body
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x , y = "FilteredCountFR" , fill = "Ethnicity" )) + geom_bar(stat= "identity", position = "dodge")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x , y = "FilteredCountFR" , fill = "Ethnicity" )) + geom_bar(stat= "identity", position = "dodge")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions App Alternative"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Ethnicity", "Campus", "Category"),
selected = "Ethnicity"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x , y = "FilteredCountFR" , fill = "Academic_Yr" )) + geom_bar(stat= "identity", position = "dodge")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions App Alternative"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Ethnicity", "Campus", "Category"),
selected = "Ethnicity"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x , y = "FilteredCountFR" , size = "Academic_Yr" )) + geom_point(stat= "identity",)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions App Alternative"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Ethnicity", "Campus", "Category"),
selected = "Ethnicity"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr"  , y = input$x  , size = "FilteredCountFR" )) + geom_point(stat= "identity")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions App Alternative"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Ethnicity", "Campus", "Category"),
selected = "Ethnicity"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr"  , y = "FilteredCountFR"  , fill = input$x )) + geom_bar(stat= "identity")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions App Alternative"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Ethnicity", "Campus", "Category"),
selected = "Ethnicity"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr"  , y = "FilteredCountFR"  , fill = input$x )) + geom_bar(stat= "identity", position = "dodge")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x , y = "FilteredCountFR" , fill = "Ethnicity" )) + geom_bar(stat= "identity", position = "dodge")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
