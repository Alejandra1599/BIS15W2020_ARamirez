install.packages("shiny")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages("shiny")
library(shiny)
library(tidyverse)
#runApp("plot_iris.R")
runApp("plot_iris.R")
runApp("plot_iris.R")
runApp("plot_iris.R")
ui <- fluidPage()
server <- function(input, output, session) {}
shinyApp(ui, server)
names(iris)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length")
)
server <- function(input, output, session) {
reactive({input$x
input$y})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, color = "Species")) +
geom_point() +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv", na = c("", "NA", "\\"))
names(homerange)
glimpse(homerange)
glimpse(iris)
names(iris)
homerange%>%
group_by(locomotion)
homerange%>%
select(locomotion)%>%
group_by(locomotion)
homerange%>%
select(locomotion)%>%
group_by(locomotion)%>%
summarise()
homerange%>%
select(tropic.guild)%>%
group_by(tropic.guild)%>%
summarise()
homerange%>%
select(trophic.guild)%>%
group_by(trophic.guild)%>%
summarise()
homerange%>%
select(thermoregulation)%>%
group_by(thermoregulation)%>%
summarise()
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px"))
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px"))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$x)) +
geom_bar() +
theme_light(base_size = 18)
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px"))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$x)) +
geom_bar() +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
install.packages(c("naniar", "shinydashboard"))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("tidyverse")
library("shiny")
library("naniar")
knitr::opts_chunk$set(echo = TRUE)
homerange
knitr::opts_chunk$set(echo = TRUE)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv", na = c("", "NA", "\\"))
knitr::opts_chunk$set(echo = TRUE)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv", na = c("", "NA", "\\"))
runApp('Runapp.R')
